import logging
import source.database.base
import source.config
from aiogram import types
from aiogram.filters import CommandObject
from source.database.requests import add_user_id, update_db


async def handle_pidval_sbu(message: types.Message):
    x = 0


async def handle_ban(message: types.Message, command: CommandObject):
    log = logging.getLogger('ban_handle')
    if message.from_user.id in source.config.editors:
        if command.args is None:
            await message.reply('üóø –©–æ–± –≤–∏–∫–æ–Ω–∞—Ç–∏ –¥–∞–Ω—É –∫–æ–º–∞–Ω–¥—É –≤–∏ –ø–æ–≤–∏–Ω–Ω—ñ –≤–≤–µ—Å—Ç–∏ ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞, —è–∫–æ–º—É –∑–±–∏—Ä–∞—î—Ç–µ—Å—å '
                                '–æ–±–º–µ–∂–∏—Ç–∏ –¥–æ—Å—Ç—É–ø')
        elif int(command.args) in source.database.base.ban_set:
            await message.reply(f'üïØ –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –∑ –¥–∞–Ω–∏–º ID –≤–∂–µ —î –∑–∞–±–ª–æ–∫–æ–≤–∞–Ω–∏–º')
        else:
            log.info(f'Ban request to {command.args} by: {message.from_user.id}')
            await add_user_id(command.args, source.database.base.ban_db)
            update_db()
            await message.reply(f'üéâ –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –∑ ID <b>{command.args}</b> —É—Å–ø—ñ—à–Ω–æ –∑–∞–±–ª–æ–∫–æ–≤–∞–Ω–æ')
    else:
        await message.reply('‚õîÔ∏è –ù–∞–∂–∞–ª—å, –≤–∏ –Ω–µ –º–∞—î—Ç–µ –¥–æ—Å—Ç—É–ø—É –¥–æ –≤–∏–∫–æ–Ω–∞–Ω–Ω—è –¥–∞–Ω–æ—ó –∫–æ–º–∞–Ω–¥–∏ ‚õîÔ∏è')