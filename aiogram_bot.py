import asyncio
import logging
import sys
import configparser
import os
import boto3
from boto3.dynamodb.conditions import Attr

from aiogram import Bot, Dispatcher, types
from aiogram.filters import CommandStart, CommandObject
from aiogram.filters.command import Command
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup, CallbackQuery

dynamodb_client = boto3.resource(service_name='dynamodb', region_name='eu-central-1',
                                 aws_access_key_id=os.environ.get('aws_access_key_id'),
                                 aws_secret_access_key=os.environ.get('aws_secret_access_key'))

db = dynamodb_client.Table(os.environ.get('db_name'))

add = InlineKeyboardButton(text='–î–æ–¥–∞—Ç–∏ –∞–≤—Ç–æ—Ä–∞', callback_data='add')
link = InlineKeyboardButton(text='–ê–≤—Ç–æ—Ä –±–æ—Ç–∞', url='t.me/kimino_musli')
kb_start = InlineKeyboardMarkup(resize_keyboard=True, inline_keyboard=[[link], [add]])

cfg = configparser.ConfigParser()
cfg.read('cfg.ini')

bot = Bot(token=os.environ.get('bot_api_key'), parse_mode='HTML')
dp = Dispatcher()

ids = cfg['EDITORS']['id']
editors = [int(num.strip()) for num in ids.split(',')]


async def author_add(name, info):
    db.put_item(
        Item={
            'author': name,
            'description': info
        }
    )


async def author_check(search_name):
    filter_expression = None
    if filter_expression:
        filter_expression |= Attr('author').contains(search_name)
    else:
        filter_expression = Attr('author').contains(search_name)
    response = db.scan(
        FilterExpression=filter_expression
    )
    item = response.get('Items', [])
    if item:
        return item
    else:
        return None


@dp.message(CommandStart())
async def send_welcome(message: types.Message):
    await message.answer(
        'üî¨ –•–æ—á–µ—à –ø–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏, —á–∏ –∞–≤—Ç–æ—Ä —î –ø–æ–≤`—è–∑–∞–Ω–∏–º –∑ –∞–≥—Ä–µ—Å–æ—Ä–æ–º?\n–ü—Ä–æ—Å—Ç–æ –≤–≤–µ–¥–∏:\n\n<b><i>!c –Ω—ñ–∫–Ω–µ–π–º</i></b>'
        '\n\n\n‚ùï <u><i>–≤—Å—ñ –∫–æ–º–∞–Ω–¥–∏ –º–∞—é—Ç—å –ø–∏—Å–∞—Ç–∏—Å—è –ª–∞—Ç–∏–Ω—Å—å–∫–∏–º–∏ –ª—ñ—Ç–µ—Ä–∞–º–∏</i></u>', reply_markup=kb_start)


@dp.message(Command('c', prefix='!'))
async def send_check_result(message: types.Message, command: CommandObject):
    print(f'Check request: {command.args}')

    if command.args is None:
        await message.reply('‚ùå –ö–æ–º–∞–Ω–¥—É –≤–≤–µ–¥–µ–Ω–æ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ. –û—Å—å –ø—Ä–∏–∫–ª–∞–¥:\n\n<i>!—Å nickname</i>')
    else:
        search = await author_check(command.args)
        if search:
            if isinstance(search, list):
                formatted_results = "\n".join(
                    f"{i + 1}. <b>{result['author']}</b>\n–ü—Ä–∏—á–∏–Ω–∞: <u>{result['description']}</u>"
                    for i, result in enumerate(search)
                )
            else:
                formatted_results = "\n".join(
                    f"1. <b>{search['author']}</b>\n–ü—Ä–∏—á–∏–Ω–∞: <u>{search['description']}</u>"
                )
            final_message = f'üôÑ –û–π –π–æ–π... –ó–¥–∞—î—Ç—å—Å—è —è –¥–µ—â–æ –∑–Ω–∞–π—à–æ–≤:\n\n{formatted_results}'
            await message.reply(final_message)
        else:
            await message.reply('üòÆ‚Äçüí® –ù–∞ —â–∞—Å—Ç—è - –Ω—ñ—á–æ–≥–æ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ!\n–ê–ª–µ —Ä–∞–¥–∏–º–æ –¥–æ–¥–∞—Ç–∫–æ–≤–æ –ø–µ—Ä–µ–≤—ñ—Ä—è—Ç–∏ –∞–≤—Ç–æ—Ä—ñ–≤')


@dp.message(Command('a', prefix='!'))
async def send_add_russian(message: types.Message, command: CommandObject):
    user_id = message.from_user.id
    if user_id in editors:
        print(f'Adding: {command.args} by {user_id}')
        if command.args is None:
            await message.reply('‚ùó –ö–æ–º–∞–Ω–¥–∞ –≤–≤–µ–¥–µ–Ω–∞ –Ω–µ–∫–æ—Ä–µ–∫—Ç–Ω–æ\n\n'
                                '–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å –∫–æ–º–∞–Ω–¥—É `!a` —Ç–∞ –¥–≤–∞ —Ä—è–¥–∫–∏, —Ä–æ–∑–¥—ñ–ª–µ–Ω—ñ '
                                '–Ω–∞—Ç–∏—Å–∫–∞–Ω–Ω—è–º –∫–ª–∞–≤—ñ—à—ñ Shift+Enter.')
        else:
            lines = command.args.split('\n')
            if len(lines) == 2:
                name, info = lines[0], lines[1]
                await author_add(name, info)
                await message.reply(f'‚úÖ –£—Å–ø—ñ—à–Ω–æ –≤–Ω–µ—Å–µ–Ω–æ –¥–æ –±–∞–∑–∏:\n\n–ù—ñ–∫–Ω–µ–π–º: {name}\n–ü—Ä–∏—á–∏–Ω–∞: {info}')
            else:
                await message.reply('‚ùó –ö–æ–º–∞–Ω–¥–∞ –≤–≤–µ–¥–µ–Ω–∞ –Ω–µ–∫–æ—Ä–µ–∫—Ç–Ω–æ\n\n'
                                    '–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å –∫–æ–º–∞–Ω–¥—É `!a` —Ç–∞ –¥–≤–∞ —Ä—è–¥–∫–∏, —Ä–æ–∑–¥—ñ–ª–µ–Ω—ñ '
                                    '–Ω–∞—Ç–∏—Å–∫–∞–Ω–Ω—è–º –∫–ª–∞–≤—ñ—à—ñ Enter.')
    else:
        await message.reply('‚õîÔ∏è –ù–∞–∂–∞–ª—å, –≤–∏ –Ω–µ –º–∞—î—Ç–µ –¥–æ—Å—Ç—É–ø—É –¥–æ –≤–∏–∫–æ–Ω–∞–Ω–Ω—è –¥–∞–Ω–æ—ó –∫–æ–º–∞–Ω–¥–∏. ‚õîÔ∏è')


@dp.callback_query(lambda c: c.data == 'add')
async def add(callback_query: CallbackQuery):
    await bot.answer_callback_query(callback_query.id)
    await bot.send_message(
        callback_query.from_user.id,
        '–í –±–æ—Ç—ñ —î –º–æ–∂–ª–∏–≤—ñ—Å—Ç—å –ø–æ–ø–æ–≤–Ω—é–≤–∞—Ç–∏ –±–∞–∑—É –Ω–µ–±–∞–∂–∞–Ω–∏—Ö –∞–≤—Ç–æ—Ä—ñ–≤ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—é—á–∏ –∫–æ–º–∞–Ω–¥—É:\n\n'
        '<i>!a –Ω—ñ–∫–Ω–µ–π–º_–∏\n</i>'
        '<i>–ø—Ä–∏—á–∏–Ω–∞</i>\n\n'
        '–î–∞–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è –¥–æ—Å—Ç—É–ø–Ω–∞ –ª–∏—à–µ –¥–µ—è–∫–∏–º –¥–æ–≤—ñ—Ä–µ–Ω–∏–º –æ—Å–æ–±–∞–º –∑ –º—ñ—Ä–∫—É–≤–∞–Ω—å –±–µ–∑–ø–µ–∫–∏. '
        '–¢–æ–º—É —è–∫—â–æ –≤–∏ –Ω–µ —î —É —Ü—å–æ–º—É —Å–ø–∏—Å–∫—É, –∞–ª–µ –±–∞–∂–∞—î—Ç–µ –¥–æ–ø–æ–≤–Ω–∏—Ç–∏ –±–∞–∑—É - –∑–≤–µ—Ä—Ç–∞–π—Ç–µ—Å—å –¥–æ –º–µ–Ω–µ, '
        '<a href="t.me/kimino_musli">KimiNo</a>'
    )


async def main():
    await dp.start_polling(bot)

if __name__ == '__main__':
    logging.basicConfig(level=logging.INFO, stream=sys.stdout)
    asyncio.run(main())
